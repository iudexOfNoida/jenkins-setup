name: Trigger Jenkins Job on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Set PowerShell Execution Policy
        run: Set-ExecutionPolicy RemoteSigned -Scope Process -Force
          
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Cppcheck on Diff
        id: cppcheck
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the diff and filter out the file names
          git fetch origin +refs/pull/${{ github.event.number }}/merge
          git diff --name-only FETCH_HEAD HEAD > files_changed.txt
          
          # Filter .cpp and .h files
          $files = Get-Content files_changed.txt | Where-Object { $_ -match "\.cpp$|\.h$" }
          Write-Output "Files changed in this PR:"
          Write-Output $files
          
          $cppcheck_results = ""
          foreach ($file in $files) {
            if (Test-Path $file) {
              $result = &"cppcheck" --enable=all $file
              $cppcheck_results += "`n$result"
            }
          }

          # Post the cppcheck results as a comment on the PR
          if ($cppcheck_results) {
            Write-Output "Cppcheck results:"
            Write-Output $cppcheck_results
            
            $body = @{
              body = "## Cppcheck results:`n```${cppcheck_results}```"
            }
            $json = $body | ConvertTo-Json
            Write-Output "Json body:"
            Write-Output $json
            
            $url = "https://api.github.com/repos/"+${{ github.repository }}+"/issues/"+${{ github.event.number }}+"/comments"
            $headers = @{
              Authorization = "token "+$env:GITHUB_TOKEN
              Accept = "application/vnd.github.v3+json"
            }
            Write-Output "URL to post comment:"
            Write-Output $url
            
            Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $json
          }
        shell: powershell

      - name: Find an Available Jenkins Job
        id: find-job
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB_NAME2: ${{ secrets.JENKINS_JOB_NAME2 }}
          JENKINS_JOB_NAME3: ${{ secrets.JENKINS_JOB_NAME3 }}
        run: |
          $jobNames = "$env:JENKINS_JOB_NAME2,$env:JENKINS_JOB_NAME3" -split ","
          $credentials = "$env:JENKINS_USER" + ":" + "$env:JENKINS_API_TOKEN"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials))
          $availableJob = $null

          foreach ($jobName in $jobNames) {
            $jenkinsJobUrl = $env:JENKINS_URL+"/job/"+$jobName+"/lastBuild/api/json"
            try {
              $response = Invoke-RestMethod -Uri $jenkinsJobUrl -Headers @{Authorization=("Basic $base64AuthInfo")}
              if ($response.building -eq $false) {
                $availableJob = $jobName
                break
              }
            } catch {
              Write-Output "Error checking job: $jobName"
            }
          }

          if ($null -eq $availableJob) {
            Write-Error "No available Jenkins jobs found"
            exit 1
          }

          Write-Output "Available Jenkins job: $availableJob"
          echo "AVAILABLE_JOB=$availableJob" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: powershell

      - name: Trigger Jenkins Job
        id: trigger-jenkins
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB_NAME: ${{ env.AVAILABLE_JOB }}
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          echo "Triggering Jenkins job..."
          $jenkinsUrl = "$env:JENKINS_URL/job/$env:JENKINS_JOB_NAME/buildWithParameters?PR_BRANCH=$env:PR_BRANCH"
          $credentials = "$env:JENKINS_USER" + ":" + "$env:JENKINS_API_TOKEN"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials))
          Invoke-RestMethod -Uri $jenkinsUrl -Method Post -Headers @{Authorization=("Basic $base64AuthInfo")}
        shell: powershell

      - name: Wait for Jenkins Job Completion
        id: wait-for-jenkins
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB_NAME: ${{ env.AVAILABLE_JOB }}
        run: |
          echo "Waiting for Jenkins job to complete..."
          $JENKINS_BUILD_URL = "$env:JENKINS_URL/job/$env:JENKINS_JOB_NAME/lastBuild/api/json"
          $JENKINS_TARGET_URL = "$env:JENKINS_URL/job/$env:JENKINS_JOB_NAME/lastBuild"
          $credentials = "$env:JENKINS_USER" + ":" + "$env:JENKINS_API_TOKEN"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials))
          $status = $null
          do {
              Start-Sleep -Seconds 60 # Poll every 60 seconds
              $response = Invoke-RestMethod -Uri $JENKINS_BUILD_URL -Headers @{Authorization=("Basic $base64AuthInfo")}
              $status = $response.building
              if ($status -eq $false) {
                  $result = $response.result
                  Write-Output "Jenkins build completed with status: $result"
                  break
              }
          } while ($status -eq $true)
          echo "result=$result" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "jenkins_build_url=$JENKINS_TARGET_URL" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: powershell

      - name: Update GitHub PR Status
        id: update-status
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          $GITHUB_SHA = (Get-Content $env:GITHUB_EVENT_PATH | ConvertFrom-Json).pull_request.head.sha
          $JENKINS_BUILD_URL = $env:jenkins_build_url
          $STATUS = $env:result
          $STATE = "success"
          if ($STATUS -ne "SUCCESS") {
            $STATE = "failure"
          }
          $body = @{
            state = $STATE
            target_url = $JENKINS_BUILD_URL
            description = "Jenkins build $STATUS"
            context = "continuous-integration/jenkins"
          }
          $github_api_url = "https://api.github.com/repos/$($env:GITHUB_REPOSITORY)/statuses/$GITHUB_SHA"
          Invoke-RestMethod -Uri $github_api_url -Method Post -Headers @{
            Authorization = "token $env:PAT"
            Accept = "application/vnd.github.v3+json"
          } -Body (ConvertTo-Json $body)
        shell: powershell

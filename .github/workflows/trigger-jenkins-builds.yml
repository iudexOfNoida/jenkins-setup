# name: Trigger Jenkins Job on PR

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]

# jobs:
#   trigger-jenkins:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Trigger Jenkins Job
#         id: trigger-jenkins
#         env:
#           JENKINS_URL: ${{ secrets.JENKINS_URL }}
#           JENKINS_USER: ${{ secrets.JENKINS_USER }}
#           JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
#           JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
#         run: |
#           echo "Triggering Jenkins job..."
#           curl -X POST $JENKINS_URL/job/$JENKINS_JOB_NAME/build --user $JENKINS_USER:$JENKINS_API_TOKEN

#       - name: Wait for Jenkins Job Completion
#         id: wait-for-jenkins
#         env:
#           JENKINS_URL: ${{ secrets.JENKINS_URL }}
#           JENKINS_USER: ${{ secrets.JENKINS_USER }}
#           JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
#           JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
#         run: |
#           echo "Waiting for Jenkins job to complete..."
#           sleep 15
#           JENKINS_BUILD_URL="$JENKINS_URL/job/$JENKINS_JOB_NAME/lastCompletedBuild/api/json"
#           while : ; do
#             response=$(curl -s --user $JENKINS_USER:$JENKINS_API_TOKEN $JENKINS_BUILD_URL)
#             result=$(echo $response | jq -r '.result')
#             if [ "$result" != "null" ]; then
#               echo "Jenkins build completed with status: $result"
#               break
#             fi
#             sleep 15
#           done
#           echo "result=$result" >> $GITHUB_ENV
#           echo "jenkins_build_url=$JENKINS_URL/job/$JENKINS_JOB_NAME/lastCompletedBuild" >> $GITHUB_ENV
# 
#       - name: Update GitHub PR Status
#         id: update-status
#         env:
#           PAT: ${{ secrets.PAT }}
#         run: |
#           GITHUB_SHA=$(jq -r '.pull_request.head.sha' $GITHUB_EVENT_PATH)
#           JENKINS_BUILD_URL=${{ env.jenkins_build_url }}
#           STATUS=${{ env.result }}
#           STATE="success"
#           if [ "$STATUS" != "SUCCESS" ]; then
#             STATE="failure"
#           fi
#           curl -s -X POST \
#             -H "Authorization: token $PAT" \
#             -H "Accept: application/vnd.github.v3+json" \
#             https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA \
#             -d "{\"state\": \"$STATE\", \"target_url\": \"$JENKINS_BUILD_URL\", \"description\": \"Jenkins build $STATUS\", \"context\": \"continuous-integration/jenkins\"}"


name: Trigger Jenkins Job on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  trigger-jenkins:
    runs-on: self-hosted

    steps:
      - name: Set PowerShell Execution Policy
        run: |
          Set-ExecutionPolicy RemoteSigned -Scope Process -Force
          
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Trigger Jenkins Job
        id: trigger-jenkins
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB_NAME: ${{ secrets.JENKINS_JOB_NAME }}
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          echo "Triggering Jenkins job..."
          $jenkinsUrl = $env:JENKINS_URL + "/job/" + $env:JENKINS_JOB_NAME + "/build"
          $credentials = "$env:JENKINS_USER" + ":" + "$env:JENKINS_API_TOKEN"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials))
          Invoke-RestMethod -Uri $jenkinsUrl -Method Post -Headers @{Authorization=("Basic $base64AuthInfo")}
        shell: powershell

      - name: Wait for Jenkins Job Completion
        id: wait-for-jenkins
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}
          JENKINS_USER: ${{ secrets.JENKINS_USER }}
          JENKINS_API_TOKEN: ${{ secrets.JENKINS_API_TOKEN }}
          JENKINS_JOB_NAME: ${{ env.AVAILABLE_JOB }}
        run: |
          echo "Waiting for Jenkins job to complete..."
          $JENKINS_BUILD_URL = $env:JENKINS_URL + "/job/" + $env:JENKINS_JOB_NAME + "/lastBuild/api/json"
          $JENKINS_TARGET_URL=$env:JENKINS_URL + "/job/" + $env:JENKINS_JOB_NAME + "/lastBuild"
          $credentials = "$env:JENKINS_USER" + ":" + "$env:JENKINS_API_TOKEN"
          $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes($credentials))
          $status = $null
          do {
              Start-Sleep -Seconds 60 # Poll every 60 seconds
              $response = Invoke-RestMethod -Uri $JENKINS_BUILD_URL -Headers @{Authorization=("Basic $base64AuthInfo")}
              $status = $response.building
              if ($status -eq $false) {
                  $result = $response.result
                  Write-Output "Jenkins build completed with status: $result"
                  break
              }
          } while ($status -eq $true)
          echo "result=$result" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "jenkins_build_url=$JENKINS_TARGET_URL" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: powershell

      - name: Update GitHub PR Status
        id: update-status
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          $GITHUB_SHA = (Get-Content $env:GITHUB_EVENT_PATH | ConvertFrom-Json).pull_request.head.sha
          $JENKINS_BUILD_URL = $env:jenkins_build_url
          $STATUS = $env:result
          $STATE = "success"
          if ($STATUS -ne "SUCCESS") {
            $STATE = "failure"
          }
          $body = @{
            state = $STATE
            target_url = $JENKINS_BUILD_URL
            description = "Jenkins build $STATUS"
            context = "continuous-integration/jenkins"
          }
          $github_api_url = "https://api.github.com/repos/$($env:GITHUB_REPOSITORY)/statuses/$GITHUB_SHA"
          Invoke-RestMethod -Uri $github_api_url -Method Post -Headers @{
            Authorization = "token $env:PAT"
            Accept = "application/vnd.github.v3+json"
          } -Body (ConvertTo-Json $body)
        shell: powershell
